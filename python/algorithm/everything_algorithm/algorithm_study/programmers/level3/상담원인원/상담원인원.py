# 상담을 원하는 참가자가 상담 요청을 했을 때, 참가자의 상담 유형을 담당하는 멘토 중 상담 중이 아닌 멘토와 상담을 시작합니다.
# > 멘토의 상태가 상담 중이 아닐 때만 상담이 가능하다.

# 만약 참가자의 상담 유형을 담당하는 멘토가 모두 상담 중이라면, 자신의 차례가 올 때까지 기다립니다. 참가자가 기다린 시간은 참가자가 상담 요청했을 때부터 멘토와 상담을 시작할 때까지의 시간입니다.
# > 기다린 시간은 상담 전까지의 기다린 시간

# 모든 멘토는 상담이 끝났을 때 자신의 상담 유형의 상담을 받기 위해 기다리고 있는 참가자가 있으면 즉시 상담을 시작합니다. 이때, 먼저 상담 요청한 참가자가 우선됩니다.
# > 상담은 큐 방식

# 멘토 n, 상담 유형 k 를 비교해서 최소한 k개 만큼 배정을 해야한다.
# 다만, 대기 시간을 계산해서 배치를 최적화 해야 한다.
def solution(k, n, reqs):
    # 멘토: n
    # 상담 유형: k
    answer = 0
    best_time = float('inf')
    best_distribution = None

    counseling_count = max([i[2]] for i in reqs)[0]
    print(counseling_count)

    return answer

print(solution(3, 5, [[10, 60, 1], [15, 100, 3], [20, 30, 1], [30, 50, 3], [50, 40, 1], [60, 30, 2], [65, 30, 1], [70, 100, 2]]))
# 25

# print(solution(2, 3, 	[[5, 55, 2], [10, 90, 2], [20, 40, 2], [50, 45, 2], [100, 50, 2]]))
# 90



# https://school.programmers.co.kr/learn/courses/30/lessons/214288